/******************************************************

Name of DS: Mr. Thines Kumar Nadaraja - (TP063097)
Name of SAS program: mydapassignment_TP)63097.sas
Description:
Date first written: Monday 19 July 2021
Date last updated: Monday 19 July 2021
Folder name: DAP_FT_JUN_2021_TP063097
Library name: MYLIB097

******************************************************/

PROC SQL;

CREATE TABLE MYLIB097.TRAINING_DS_TP063097_BK AS
SELECT * FROM MYLIB097.TRAINING_DS;

QUIT;

PROC SQL;
DATA MYLIB097.TRAINING_DS_TP063097_BK;
SET MYLIB097.TRAINING_DS_TP063097_BK;
LABEL
	SME_LOAN_ID_NO = 'Loan Application No.'
	GENDER = 'Gender'
	MARITAL_STATUS = 'Marital Status'
	FAMILY_MEMBERS = 'Family Members'
	QUALIFICATION = 'Qualification'
	EMPLOYMENT = 'Employment'
	CANDIDATE_INCOME = 'Candidate Income'
	GUARANTEE_INCOME = 'Guaranteed Income'
	LOAN_AMOUNT = 'Loan Amount'
	LOAN_DURATION = 'Loan Duration'
	LOAN_HISTORY = 'Loan History'
	LOAN_LOCATION = 'Loan Location'
	LOAN_APPROVAL_STATUS 'Loan Approval Status';
RUN;

/* To view Table after changing the column names */

PROC SQL;

SELECT * FROM MYLIB097.TRAINING_DS_TP063097_BK;
QUIT;

/**************************************/

/* UNIVARIATE ANALYSIS FOR GENDER */

TITLE 'UNIVARIATE ANALYSIS GENDER';
PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK;
TABLE GENDER;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBAR GENDER;
TITLE 'GENDER';
RUN;

/* UNIVARIATE ANALYSIS FOR MARITAL STATUS */

TITLE 'UNIVARIATE ANALYSIS FOR MARITAL STATUS';
PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK;
TABLE MARITAL_STATUS;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBAR MARITAL_STATUS;
TITLE 'MARITAL STATUS';
RUN;

/* UNIVARIATE ANALYSIS FOR LOAN LOCATION */

TITLE 'UNIVARIATE ANALYSIS FOR LOAN LOCATION';
PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK;
TABLE LOAN_LOCATION;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBAR LOAN_LOCATION;
TITLE 'LOAN LOCATION';
RUN;

/* UNIVARIATE ANALYSIS FOR EMPLOYMENT */

TITLE 'UNIVARIATE ANALYSIS FOR EMPLOYMENT';
PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK;
TABLE EMPLOYMENT;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBAR EMPLOYMENT;
TITLE 'EMPLOYMENT';
RUN;

/* UNIVARIATE ANALYSIS FOR QUALIFICATION */

TITLE 'UNIVARIATE ANALYSIS FOR QUALIFICATION';
PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK;
TABLE QUALIFICATION;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBAR QUALIFICATION;
TITLE 'QUALIFICATION';
RUN;

/* UNIVARIATE ANALYSIS FOR FAMILY MEMBERS */

TITLE 'UNIVARIATE ANALYSIS FOR FAMILY MEMBERS';
PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK;
TABLE FAMILY_MEMBERS;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBAR FAMILY_MEMBERS;
TITLE 'FAMILY MEMBERS';
RUN;

/* UNIVARIATE ANALYSIS FOR LOAN HISTORY */

TITLE 'UNIVARIATE ANALYSIS FOR LOAN HISTORY';
PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK;
TABLE LOAN_HISTORY;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBAR LOAN_HISTORY;
TITLE 'LOAN HISTORY';
RUN;

/*****************************************************************************
Bivariate Analysis on FAMILY_MEMBERS (Categorical variable) versus CANDIDATE_ICNOME (Continuous variable)
********************************************************************************/

PROC MEANS DATA = MYLIB097.TRAINING_DS_TP063097_BK;
CLASS FAMILY_MEMBERS; /* CHAR */
VAR CANDIDATE_INCOME; /* NUMERIC */
TITLE 'BIVARIATE ANALYSIS ON FAMILY_MEMBERS (CATEGORICAL VARIABLE) VS. CANDIDATE_INCOME (CONTINUOUS VARIABLE)';
RUN;

PROC SGPLOT DATA = MYLIB097.TRAINING_DS_TP063097_BK;
VBOX CANDIDATE_INCOME / CATEGORY = FAMILY_MEMBERS;
/* FM X-AXIS CI Y-AXIS */
TITLE 'BIVARIATE ANALYSIS ON FAMILY_MEMBERS (CATEGORICAL VARIABLE) VS. CANDIDATE_INCOME (CONTINUOUS VARIABLE)';
RUN;

/************************************************************

Univariate Analysis for the categorical variable found in the TESTING_DS

**************************************************************/

%MACRO MYMACRO_CV(DATASET_NAME, VARIABLE_NAME_1, VARIABLE_NAME_2, TITLE_1);
PROC FREQ DATA = &DATASET_NAME;
TABLE &VARIABLE_NAME_1 * &VARIABLE_NAME_2 /
PLOTS = FREQPLOT (TWOWAY = STACKED SCALE = GROUPPCT);
TITLE &TITLE_1;
RUN;
%MEND MYMACRO_CV;

ODS GRAPHICS/ RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;

PROC SGPLOT DATA = &DATASET_NAME;
VBAR &VARIABLE_NAME;
TITLE &TITLE_1;
TITLE2 &TITLE_2;
RUN;
%MEND MYMACRO_CV;

/* Call the SAS Macro to perform bivarirate analysis for Marital Status vs. Gender */

%MYMACRO_CV(MYLIB097.TRAINING_DS_TP063097_BK, MARITAL_STATUS, GENDER, 'FIGURE MACRO');

/* call the SAS Macro to perform bivariate analysis for Marital Status vs. Loan Location */
%MYMACRO_CV(MYLIB097.TRAINING_DS_TP063097_BK, MARITAL_STATUS, LOAN_LOCATION, 'FIGURE MACRO MARITAL STATUS VS. LOAN LOCATION');

/* IMPUTE MISSING VALUES IN THE TRAINING DATASET *

STEP 1: MAKE A COPY OF THE TRAINING DATASET TO BE RENAMED AS BK1 FROM BK */

PROC SQL;
CREATE TABLE MYLIB097.TRAINING_DS_TP063097_BK1 AS
SELECT *FROM MYLIB097.TRAINING_DS_TP063097_BK;
QUIT;

/* BEFORE IMPUTATION/CLEANSING OF THE MISSING VALUES FOUND IN THE CV GENDER

STEP 2: Perform univariate analysis on the GENDER variable before imputation */

PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_BK1 ;

TABLE GENDER;
TITLE 'BEFORE IMPUTATION';
TITLE2 'ENTER';
FOOTNOTE 'END OF ANALYSIS';

RUN;

/* STEP 3: DETAILS OF THE MISSING VALUES FOUND... */

PROC SQL;

TITLE 'DETAILS OF THE MISSING VALUES FOUND...';
SELECT *
FROM MYLIB097.TRAINING_DS_TP063097_BK1 e
WHERE ( ( e.gender IS NULL ) OR
		( e.gender EQ '') ) ;
		
QUIT;

/* STEP 4: TO FIND THE MOD G.... */

PROC SQL;

CREATE TABLE MYLIB097.TRAINING_DS_TP063097_BK2 AS 
SELECT e.GENDER , COUNT (*) AS COUNTS FROM MYLIB097.TRAINING_DS_TP063097_BK1 e
WHERE (( e.gender IS NOT NULL) OR
		( e.gender NE '' ) )
GROUP BY e.GENDER;

QUIT;

/* STEP 5: Display the details found in the dataset MYLIB097.TRAINING_DS_TP063097_BK2 (The backup copy of the MOD G dataset) */

PROC SQL;

TITLE 'TITLE 1';
TITLE2 ' TITLE 2';
FOOTNOTE 'END OF REPORT';

SELECT *
FROM MYLIB097.TRAINING_DS_TP063097_BK2;

QUIT;

/* STEP 7: Copy of the dataset MYLIB097.TRAINING_DS_TP063097_BK1 is made */

PROC SQL;

CREATE TABLE MYLIB097.TRAINING_DS_COPY_GENDER AS
SELECT * FROM MYLIB097.TRAINING_DS_TP063097_BK1;

QUIT;

/* STEP 8: IMPUTE MISSING VALUES FROM THE NEW COPY OF THE DATASET */

PROC SQL;

UPDATE MYLIB097.TRAINING_DS_COPY_GENDER
SET GENDER = ( SELECT eo.gender label = 'mod of gender'
				FROM MYLIB097.TRAINING_DS_TP063097_BK2 eo
				WHERE eo.counts EQ ( SELECT MAX (e.counts)
										FROM MYLIB097.TRAINING_DS_TP063097_BK2 e ) ) 
				WHERE ( ( gender IS NULL ) OR
						( gender EQ '') );
						
QUIT;

/* STEP 9: AFTER IMPUTATION */

PROC FREQ DATA = MYLIB097.TRAINING_DS_COPY_GENDER ;

TABLE GENDER;
TITLE 'AFTER IMPUTATION';
TITLE2 'ENTER';
FOOTNOTE 'END OF ANALYSIS';

RUN;

/*

STEP 8.1.1: MAKE A COPY OF THE TRAINING DATASET TO BE RENAMED AS FM (FAMILY MEMBERS) FROM BK */

/**************************************
*STEP 1
***************************************/

PROC SQL;
CREATE TABLE MYLIB097.TRAINING_DS_TP063097_FM AS
SELECT *FROM MYLIB097.TRAINING_DS_COPY_GENDER;
QUIT;

/* BEFORE IMPUTATION/CLEANSING OF THE MISSING VALUES FOUND IN THE CV FAMILY_MEMBERS

STEP 2: Perform univariate analysis on the FAMILY_MEMBERS variable before imputation */

PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_FM ;

TABLE FAMILY_MEMBERS;
TITLE 'BEFORE IMPUTATION';
TITLE2 'ENTER';
FOOTNOTE 'END OF ANALYSIS';

RUN;

/* STEP 3: DETAILS OF THE MISSING VALUES FOUND... */

PROC SQL;

TITLE 'DETAILS OF THE MISSING VALUES FOUND...';
SELECT *
FROM MYLIB097.TRAINING_DS_TP063097_FM t
WHERE ( ( t.family_members IS NULL ) OR
		( t.family_members EQ '') ) ;
		
QUIT;

/* STEP 4: TO FIND THE MOD G.... */

PROC SQL;

CREATE TABLE MYLIB097.TRAINING_DS_TP063097_FM2 AS 
SELECT t.FAMILY_MEMBERS , COUNT (*) AS COUNTS FROM MYLIB097.TRAINING_DS_TP063097_FM t
WHERE (( t.family_members IS NOT NULL) OR
		( t.family_members NE '' ) )
GROUP BY t.FAMILY_MEMBERS;

QUIT;

/* STEP 5: Display the details found in the dataset MYLIB097.TRAINING_DS_TP063097_FM2 (The backup copy of the MOD G dataset) */

PROC SQL;

TITLE 'TITLE 1';
TITLE2 ' TITLE 2';
FOOTNOTE 'END OF REPORT';

SELECT *
FROM MYLIB097.TRAINING_DS_TP063097_FM2;

QUIT;

/* STEP 7: Copy of the dataset MYLIB097.TRAINING_DS_TP063097_FM2 is made */

PROC SQL;

CREATE TABLE MYLIB097.TRAINING_DS_COPY_FM AS
SELECT * FROM MYLIB097.TRAINING_DS_TP063097_FM2;

QUIT;

/* STEP 8: IMPUTE MISSING VALUES FROM THE NEW COPY OF THE DATASET */

PROC SQL;

UPDATE MYLIB097.TRAINING_DS_TP063097_FM /* original dataset for FAMILY MEMBER */
SET FAMILY_MEMBERS = ( SELECT to.family_members label = 'mod of family members'
				FROM MYLIB097.TRAINING_DS_COPY_FM to
				WHERE to.counts EQ ( SELECT MAX (t.counts)
										FROM MYLIB097.TRAINING_DS_COPY_FM t ) ) 
				WHERE ( ( family_members IS NULL ) OR
						( family_members EQ '') );
						
QUIT;

/* STEP 9: AFTER IMPUTATION */

PROC FREQ DATA = MYLIB097.TRAINING_DS_TP063097_FM ;

TABLE FAMILY_MEMBERS;
TITLE 'AFTER IMPUTATION';
TITLE2 'ENTER';
FOOTNOTE 'END OF ANALYSIS';

RUN;

/*Number of observations after imputation */ 

PROC SQL;

TITLE 'No. of observations after imputation';
SELECT COUNT (*) LABEL = 'NO. OF OBSERVATIONS'
FROM MYLIB097.TRAINING_DS_TP063097_FM t
WHERE (( t.family_members EQ '') OR
			(t.family_members IS NULL ) );
			
QUIT;
/* To remove the + symbol found in the data of FAMILY_MEMBERS *****************************/

/*Step 1 */

TITLE 'Step 1';

PROC SQL;
SELECT COUNT (*) LABEL = 'NO. OF OBSERVATIONS'
FROM MYLIB097.TRAINING_DS_TP063097_FM t
WHERE ( SUBSTR (t.family_members,2,1) EQ '+'); /*No. of observations with + symbol */
QUIT;

/*
Before removal of the + symbol from 0,1,2,3+
*/

TITLE 'Step 2';

PROC SQL;
UPDATE MYLIB097.TRAINING_DS_TP063097_FM 
SET family_members = SUBSTR(family_members,1,1) 
WHERE ( SUBSTR (family_members,2,1) EQ '+'); /*No. of observations with + symbol */
QUIT;

/*
Step 3: After removal of the + sign, list the observation with missing values */

TITLE 'REMOVAL OF THE (+) SIGN';
PROC SQL;
SELECT t.FAMILY_MEMBERS LABEL = 'FAMILY CATEGORY', 
		COUNT(*) LABEL = 'NO. OF APPLICANTS'
FROM MYLIB097.TRAINING_DS_TP063097_FM t
GROUP BY t.FAMILY_MEMBERS;
QUIT;

/*Imputation of missing valubes in LOAN_AMOUNT */
/*STEP 1 
**********************************************************************************************************
*/

TITLE 'DISPLAY MISSING VALUES IN LOAN_AMOUNT';
PROC SQL;

SELECT *
FROM MYLIB097.TRAINING_ds_TP063097_FM t
WHERE ( t.LOAN_AMOUNT EQ . ); /* EQ . is used as this is a numeric value */
QUIT;

/*STEP 2*/

TITLE 'FIND NUMBER OF OBSERVATIONS OF MISSING VALUES FOR LOAN_AMOUNT';

PROC SQL;
SELECT COUNT (*) LABEL = 'NUMBER OF OBS'
FROM MYLIB097.TRAINING_DS_TP063097_FM t
WHERE (t.LOAN_AMOUNT EQ . );
QUIT;

/*STEP 3*/

TITLE 'COPY OF THE DATASET';

PROC SQL;
CREATE TABLE MYLIB097.TRAINING_DS_TP063097_LA AS /* Before imputation, a copy of the dataset is created */
SELECT * FROM MYLIB097.TRAINING_DS_TP063097_FM;
QUIT;

/* STEP 4: IMPUTE MISSING VALUES */

TITLE 'IMPUTATION OF MISSING VALUES';

PROC STDIZE DATA=MYLIB097.TRAINING_DS_TP063097_FM REPONLY
METHOD=MEAN OUT=MYLIB097.TRAINING_DS_TP063097_FM;
VAR LOAN_AMOUNT;

QUIT;

/*******************************************************************************/

/* 9.1 Create a copy of the TESTING_DS dataset */

/**********************************************************************************************/

TITLE 'COPY OF THE TESTING DATASET'
TITLE2 'TESTING DATASET';
PROC SQL;
CREATE TABLE MYLIB097.TESTING_DS_TP063097_BK AS 
SELECT *FROM MYLIB097.TESTING_DS;

QUIT;

/* Univariate Analysis on the variables found in the MYLIB097.TESTING_DS_TP060397_BK. */

%MACRO MYMACRO_UVA_TP97(pds_name, pcate_variable_1, ptitle_1,ptitle_2);
TITLE &ptitle_1;
TITLE2 &ptitle_2;
PROC FREQ DATA = &pds_name;
TABLE &pcate_variable_1;
RUN;
ODS GRAPHICS / RESET WIDTH = 4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = &pds_name;
VBAR &pcate_variable_1;
RUN;
%MEND MYMACRO_UVA_TP97;

/*Call SAS Macro to perform Univariate Analysis for the cat. var. marital_status */

%MYMACRO_UVA_TP97(MYLIB097.TESTING_DS_TP063097_BK, marital_status,'Univariate Analysis', 'Figure 1: Marital Status');

/*SAS Macro for gender */
%MYMACRO_UVA_TP97(MYLIB097.TESTING_DS_TP063097_BK, gender, 'Univariate Analysis', 'Figure 2: Gender');

/*SAS Macro for qualification */
%MYMACRO_UVA_TP97(MYLIB097.TESTING_DS_TP063097_BK, QUALIFICATION, 'Univariate Analysis', 'Figure 3: Qualification');

/*SAS MACRO for employment */
%MYMACRO_UVA_TP97(MYLIB097.TESTING_DS_TP063097_BK, EMPLOYMENT, 'Univariate Analysis', 'Figure 4: Employment');

/*SAS Macro for Loan_Location */
%MYMACRO_UVA_TP97(MYLIB097.TESTING_DS_TP063097_BK, LOAN_LOCATION, 'Univariate Analysis', 'Figure 5: Loan Location');

/*SAS Macro for FAMILY_MEMBERS */

%MYMACRO_UVA_TP97(MYLIB097.TESTING_DS_TP063097_BK, FAMILY_MEMBERS, 'Univariate Analysis', 'Figure 6: Family Members');

/*9.2 Univariate Analysis on the continuous variables found in the Testing dataset */

%MACRO MYMACRO_UVACONTIV_TP97(pds_name, pconti_variable_1, ptitle_1,ptitle_2);
PROC MEANS DATA = &pds_name N NMISS MIN MAX MEAN MEDIAN STD;
VAR &pconti_variable_1;
TITLE &ptitle_1;
RUN;

ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = &pds_name;
HISTOGRAM &pconti_variable_1;
TITLE &ptitle_1;
RUN;
%MEND MYMACRO_UVACONTIV_TP97;

/*Call SAS Macro to do the Univariate Analysis on Candidate Income */
%MYMACRO_UVACONTIV_TP97 (MYLIB097.TESTING_DS_TP063097_BK, CANDIDATE_INCOME, 'UNIVARIATE ANALYSIS', 'FIGURE 1: CANDIATE INCOME');

/*CALL SAS MACRO TO DO UNIV. ANALYSIS FOR GUARANTEE INCOME */
%MYMACRO_UVACONTIV_TP97 (MYLIB097.TESTING_DS_TP063097_BK, GUARANTEE_INCOME, 'UNIVARIATE ANALSYSIS', 'FIGURE 2: GUARANTEE INCOME');

/*CALL SAS MACRO TO DO UNIV. ANALAYSIS FOR LOAN AMOUNT */
%MYMACRO_UVACONTIV_TP97 (MYLIB097.TESTING_DS_TP063097_BK, LOAN_AMOUNT, 'UNIVARIATE ANALYSIS', 'FIGURE 3: LOAN AMOUNT');

/*CALL SAS MACRO TO DO UNIV. ANALYSIS FOR LOAN DURATION */

%MYMACRO_UVACONTIV_TP97 (MYLIB097.TESTING_DS_TP063097_BK, LOAN_DURATION, 'UNIVARIATE ANALYSIS', 'FIGURE 4: LOAN DURATION');

/* Bivariate Analysis on the dataset MYLIB097.TESTING_DS_TP063097_BK */

/*SAS Macro *****************************************************************************/

%MACRO MACRO_BIVATDS_TP97(pds_name, pcate_variable_1, pcate_variable_2, ptitle_1);
PROC FREQ DATA = &pds_name;
TABLE &pcate_variable_1 * &pcate_variable_2 /
PLOTS = FREQPLOT (TWOWAY = STACKED SCALE = GROUPPCT );
TITLE &ptitle_1;
RUN;
%MEND MACRO_BIVATDS_TP97;

/*CALL SAS MACRO TO DO BIVARIATE ANALYSIS FOR THE COMBINATION OF THE C AND C VARIABLES gENDER VS MARITAL_STATUS */ 

%MACRO_BIVATDS_TP97(MYLIB097.TESTING_DS_TP063097_BK, MARITAL_STATUS, GENDER, 'Figure 5.5 GENDER VS. MARITAL_STATUS');

/*Call SAS Macro to do Bivariate Analysis for the combination of the C and C Gender vs. Qualification variables */

%MACRO_BIVATDS_TP97(MYLIB097.TESTING_DS_TP063097_BK, GENDER, QUALIFICATION, 'Figure 5.5 GENDER VS. MARITAL_STATUS');

/**********************************************************************************************
Bivariate Analysis on Loan_Location (Cat. Var) vs. Gender (Cont. Var.) */

%MACRO_BIVATDS_TP97(MYLIB097.TESTING_DS_TP063097_BK, GENDER, LOAN_LOCATION, 'Figure of GENDER VS. LOAN_LOCATION');

/* Bivariate analysis of combination of variables (categorical vs. numeric) */
/* The macro MACRO_BIVATDS_TP97 has parameters ()
pds_name - > Name of Data Set
pcate_variable_1 -> 1st variable name to be involved
pcate_variable_2 -> 2nd variable name to be involved
ptitle -> title to be displayed in the output
********************************************************************************/
%MACRO MACRO_BIVATDS_TP97(pds_name, pcate_variable_1, pconti_variable_2, ptitle);
PROC MEANS DATA = &pds_name;
CLASS &pcate_variable_1; /* CHAR */
VAR &pconti_variable_2; /* NUMERIC */
TITLE &ptitle;
RUN;

PROC SGPLOT DATA = &pds_name;
VBOX &pconti_variable_2 / CATEGORY = &pcate_variable_1;
TITLE &ptitle;
RUN;

%MEND MACRO_BIVATDS_TP97;

/*Call SAS Macro to do BIVARIATE ANALYSIS for the CV Gender vs. Candidate Income */

%MACRO_BIVATDS_TP97(MYLIB097.TESTING_DS_TP063097_BK, GENDER, CANDIDATE_INCOME, 'Figure of Bivat Analysis');

/* Impute missing values found in the MYLIB097.TESTING_DS_TP063097_BK  dataset*/

/*GENDER MISSING VALUES IMPUTATION */

/**************************************************************************************************/

/*STEP 1: CREATE A COPY OF THE MYLIB097.TESTING_DS_TP063097_BK AS MYLIB097.TESTING_DS_TP063097_BK1 */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_GENDER AS 
SELECT * FROM MYLIB097.TESTING_DS_TP063097_BK;

QUIT; 

/* STEP 2: BEFORE IMPUTATION: LIST THE OBSERVATIONS WITH MISSING VALUES */

TITLE 'BEFORE IMPUTATION';
TITLE2 'MISSING VALUES';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_GENDER t
WHERE ((t.gender EQ '') OR
		( t.gender IS NULL ) ) ;
		
QUIT;

TITLE 'LIST THE MISSING VALUES';
PROC SQL;
SELECT COUNT (*) LABEL = 'NO OF OBSERVATIONS'
FROM MYLIB097.TESTING_DS_TP063097_GENDER t
WHERE (( t.gender EQ '') OR
		( t.gender IS NULL ) );
		
QUIT; 

/* STEP 3: LIST OBSERVATIONS WITH MISSING VALUES */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_GENDER_N AS 
SELECT t.gender AS GENDER_NAME, COUNT(*) AS TOTAL_COUNTS
FROM MYLIB097.TESTING_DS_TP063097_GENDER t 
WHERE (( t.gender NE '') OR
		(t.gender IS NOT NULL ) ) 
GROUP BY t.gender;
QUIT; 

/* STEP 4: LIST GENDER COUNTS */

PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_GENDER_N t;
QUIT; 

/* STEP 5: MAXIMUM TOTAL COUNTS OF GENDER */

PROC SQL;
SELECT MAX (t.total_counts)
FROM MYLIB097.TESTING_DS_TP063097_GENDER_N t;
QUIT;

/* STEP 6: To check if earlier step shows GENDER as FEMALE or MALE*/

PROC SQL;
SELECT to.gender_name
FROM MYLIB097.TESTING_DS_TP063097_GENDER_N to
WHERE to.total_counts EQ ( SELECT MAX (ti.total_counts)
							FROM MYLIB097.TESTING_DS_TP063097_GENDER_N ti);
QUIT;

/*STEP 7: impute missing values in GENDER*/

PROC SQL;
UPDATE MYLIB097.TESTING_DS_TP063097_GENDER
SET GENDER = ( SELECT to.gender_name
				FROM MYLIB097.TESTING_DS_TP063097_GENDER_N to
				WHERE to.total_counts EQ ( SELECT MAX (ti.total_counts)
											FROM MYLIB097.TESTING_DS_TP063097_GENDER_N ti ) )
WHERE ( ( gender EQ '') OR
		( gender IS NULL ) );
QUIT;

/* STEP 8: AFTER IMPUTATION: LIST THE OBSERVATIONS */

TITLE 'AFTER IMPUTATION';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_GENDER t
WHERE ((t.gender EQ '') OR
		( t.gender IS NULL ) ) ;
		
QUIT;

PROC SQL;
SELECT COUNT (*) LABEL = 'NO OF OBSERVATIONS'
FROM MYLIB097.TESTING_DS_TP063097_GENDER t
WHERE (( t.gender EQ '') OR
		( t.gender IS NULL ) );
		
QUIT; 

/* Employment- Categorical missing values *********************************************/

/*STEP 1: CREATE A COPY OF THE MYLIB097.TESTING_DS_TP063097_BK AS MYLIB097.TESTING_DS_TP063097_BK1 */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_EMPLOYMENT AS 
SELECT * FROM MYLIB097.TESTING_DS_TP063097_BK;

QUIT; 

/* STEP 2: BEFORE IMPUTATION: LIST THE OBSERVATIONS WITH MISSING VALUES */

TITLE 'BEFORE IMPUTATION';
TITLE2 'MISSING VALUES';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT t
WHERE ((t.employment EQ '') OR
		( t.employment IS NULL ) ) ;
		
QUIT;

TITLE 'LIST THE MISSING VALUES';
PROC SQL;
SELECT COUNT (*) LABEL = 'NO OF OBSERVATIONS'
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT t
WHERE (( t.employment EQ '') OR
		( t.employment IS NULL ) );
		
QUIT; 

/* STEP 3: LIST OBSERVATIONS WITH MISSING VALUES */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_EMPLOYMENT_N AS 
SELECT t.employment AS EMPLOYMENT, COUNT(*) AS TOTAL_COUNTS
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT t 
WHERE (( t.employment NE '') OR
		(t.employment IS NOT NULL ) ) 
GROUP BY t.employment;
QUIT; 

/* STEP 4: LIST employment COUNTS */

PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT_N t;
QUIT; 

/* STEP 5: MAXIMUM TOTAL COUNTS OF employment */

PROC SQL;
SELECT MAX (t.total_counts)
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT_N t;
QUIT;

/* STEP 6: To check if earlier step shows EMPLOYMENT as YES OR NO*/

PROC SQL;
SELECT to.employment
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT_N to
WHERE to.total_counts EQ ( SELECT MAX (ti.total_counts)
							FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT_N ti);
QUIT;

/*STEP 7: impute missing values in employment*/

PROC SQL;
UPDATE MYLIB097.TESTING_DS_TP063097_EMPLOYMENT
SET EMPLOYMENT = ( SELECT to.employment
				FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT_N to
				WHERE to.total_counts EQ ( SELECT MAX (ti.total_counts)
											FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT_N ti ) )
WHERE ( ( employment EQ '') OR
		( employment IS NULL ) );
QUIT;

/* STEP 8: AFTER IMPUTATION: LIST THE OBSERVATIONS */

TITLE 'AFTER IMPUTATION';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT t
WHERE ((t.employment EQ '') OR
		( t.employment IS NULL ) ) ;
		
QUIT;

PROC SQL;
SELECT COUNT (*) LABEL = 'NO OF OBSERVATIONS'
FROM MYLIB097.TESTING_DS_TP063097_EMPLOYMENT t
WHERE (( t.employment EQ '') OR
		( t.employment IS NULL ) );
		
QUIT; 

/* Family members - Categorical ******************************************************************/

/*STEP 1: CREATE A COPY OF THE MYLIB097.TESTING_DS_TP063097_BK AS MYLIB097.TESTING_DS_TP063097_BK1 */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_FM AS 
SELECT * FROM MYLIB097.TESTING_DS_TP063097_BK;

QUIT; 

/* STEP 2: BEFORE IMPUTATION: LIST THE OBSERVATIONS WITH MISSING VALUES */

TITLE 'BEFORE IMPUTATION';
TITLE2 'MISSING VALUES';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_FM t
WHERE ((t.FAMILY_MEMBERS EQ '') OR
		( t.FAMILY_MEMBERS IS NULL ) ) ;
		
QUIT;

TITLE 'LIST THE MISSING VALUES';
PROC SQL;
SELECT COUNT (*) LABEL = 'NO OF OBSERVATIONS'
FROM MYLIB097.TESTING_DS_TP063097_FM t
WHERE (( t.FAMILY_MEMBERS EQ '') OR
		( t.FAMILY_MEMBERS IS NULL ) );
		
QUIT; 

/* STEP 3: LIST OBSERVATIONS WITH MISSING VALUES */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_FM_N AS 
SELECT t.FAMILY_MEMBERS AS FAMILY_MEMBERS, COUNT(*) AS TOTAL_COUNTS
FROM MYLIB097.TESTING_DS_TP063097_FM t 
WHERE (( t.FAMILY_MEMBERS NE '') OR
		(t.FAMILY_MEMBERS IS NOT NULL ) ) 
GROUP BY t.FAMILY_MEMBERS;
QUIT; 

/* STEP 4: LIST FAMILY_MEMBERS COUNTS */

PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_FM_N t;
QUIT; 

/* STEP 5: MAXIMUM TOTAL COUNTS OF FAMILY_MEMBERS */

PROC SQL;
SELECT MAX (t.total_counts)
FROM MYLIB097.TESTING_DS_TP063097_FM_N t;
QUIT;

/* STEP 6: To check if earlier step shows FAMILY_MEMBERS as 0*/

PROC SQL;
SELECT to.FAMILY_MEMBERS
FROM MYLIB097.TESTING_DS_TP063097_FM_N to
WHERE to.total_counts EQ ( SELECT MAX (ti.total_counts)
							FROM MYLIB097.TESTING_DS_TP063097_FM_N ti);
QUIT;

/*STEP 7: impute missing values in FAMILY_MEMBERS*/

PROC SQL;
UPDATE MYLIB097.TESTING_DS_TP063097_FM
SET FAMILY_MEMBERS = ( SELECT to.FAMILY_MEMBERS
				FROM MYLIB097.TESTING_DS_TP063097_FM_N to
				WHERE to.total_counts EQ ( SELECT MAX (ti.total_counts)
											FROM MYLIB097.TESTING_DS_TP063097_FM_N ti ) )
WHERE ( ( FAMILY_MEMBERS EQ '') OR
		( FAMILY_MEMBERS IS NULL ) );
QUIT;

/* STEP 8: AFTER IMPUTATION: LIST THE OBSERVATIONS */

TITLE 'AFTER IMPUTATION';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_FM t
WHERE ((t.FAMILY_MEMBERS EQ '') OR
		( t.FAMILY_MEMBERS IS NULL ) ) ;
		
QUIT;

PROC SQL;
SELECT COUNT (*) LABEL = 'NO OF OBSERVATIONS'
FROM MYLIB097.TESTING_DS_TP063097_FM t
WHERE (( t.FAMILY_MEMBERS EQ '') OR
		( t.FAMILY_MEMBERS IS NULL ) );
		
QUIT; 


/* Loan History- Categorical - Missing Values **************************************************************************************************/

/*STEP 1: CREATE A COPY OF THE MYLIB097.TESTING_DS_TP063097_BK AS MYLIB097.TESTING_DS_TP063097_BK1 */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_LH AS /*Loan History named as LH*/
SELECT * FROM MYLIB097.TESTING_DS_TP063097_BK;

QUIT; 

/* STEP 2: BEFORE IMPUTATION: LIST THE OBSERVATIONS WITH MISSING VALUES */

TITLE 'BEFORE IMPUTATION';
TITLE2 'MISSING VALUES';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_LH t
WHERE ((t.LOAN_HISTORY EQ .)); 
		
QUIT;

TITLE 'LIST THE MISSING VALUES';
PROC SQL;
SELECT COUNT (*) AS TOTAL_NUMBER_OF_OBSERVATIONS
FROM MYLIB097.TESTING_DS_TP063097_LH t
WHERE (( t.LOAN_HISTORY EQ .)); 
		
QUIT; 

/* STEP 3: FIND THE MOD */

PROC SQL;
CREATE TABLE MYLIB097.TESTING_DS_TP063097_LH_MOD
AS SELECT LOAN_HISTORY, COUNT (*) AS COUNTS
FROM MYLIB097.TESTING_DS_TP063097_LH
WHERE (( LOAN_HISTORY NE .) OR
		( LOAN_HISTORY IS NOT NULL ) )
GROUP BY LOAN_HISTORY;
QUIT;

/* STEP 4: LIST LOAN_HISTORY COUNTS */

PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_LH_MOD t;
QUIT; 

/* STEP 5: PROVIDE MOD OF LOAN HISTORY */

PROC SQL;
TITLE ' MOD OF LOAN HISTORY';

SELECT eo.LOAN_HISTORY LABEL = 'MOD OF LOAN HISTORY'
FROM MYLIB097.TESTING_DS_TP063097_LH_MOD eo
WHERE ( eo.counts EQ ( SELECT MAX (ei.counts)
		FROM MYLIB097.TESTING_DS_TP063097_LH_MOD ei ) );
QUIT; 


/*STEP 7: impute missing values in LOAN_HISTORY*/

PROC SQL;
CREATE TABLE MYLIB097.TESTING_DS_TP063097_LH_A AS 
SELECT * FROM MYLIB097.TESTING_DS_TP063097_LH_MOD;

QUIT; 
PROC SQL;
UPDATE MYLIB097.TESTING_DS_TP063097_LH
SET LOAN_HISTORY = ( SELECT to.LOAN_HISTORY LABEL = 'MOD OF LOAN HISTORY'
				FROM MYLIB097.TESTING_DS_TP063097_LH_MOD to
				WHERE to.counts EQ ( SELECT MAX (ti.counts)
											FROM MYLIB097.TESTING_DS_TP063097_LH_MOD ti ) )
				WHERE ( ( LOAN_HISTORY EQ .) OR
						( LOAN_HISTORY IS NULL) );
QUIT;

/* STEP 8: AFTER IMPUTATION: LIST THE OBSERVATIONS */

TITLE 'AFTER IMPUTATION';
PROC SQL;
SELECT *
FROM MYLIB097.TESTING_DS_TP063097_LH t
WHERE ((t.LOAN_HISTORY EQ .)); 
		
QUIT;

PROC SQL;
SELECT COUNT (*) LABEL = 'NO OF OBSERVATIONS'
FROM MYLIB097.TESTING_DS_TP063097_LH t
WHERE (( t.LOAN_HISTORY EQ .));
		
QUIT; 


/* Impute Missing Values for the LOAN_AMOUNT ******************************************************/

/*Loan_Amount is a numerical value */

/*STEP 1: CREATE A COPY OF THE MYLIB097.TESTING_DS_TP063097_BK AS MYLIB097.TESTING_DS_TP063097_BK1 */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_LA AS /*Loan Amount named as LA*/
SELECT * FROM MYLIB097.TESTING_DS_TP063097_BK;

QUIT; 

PROC SQL;

SELECT *
FROM MYLIB097.TESTING_DS_TP063097_LA t
WHERE ( t.LOAN_AMOUNT EQ .);
QUIT;

/*STEP 2: */
TITLE 'Loan Amount No. Of OBS';
PROC SQL;
SELECT COUNT (*) LABEL = 'NO. OF OBS'
FROM MYLIB097.TESTING_DS_TP063097_LA t
WHERE ( t.LOAN_AMOUNT EQ .);
QUIT;

/*STEP 3: */

PROC SQL;
CREATE TABLE MYLIB097.TESTING_DS_TP063097_LA_N AS
SELECT * FROM  MYLIB097.TESTING_DS_TP063097_LA;

QUIT;

/*STEP 4: IMPUTING MISSING VALUES AS THIS IS A NUMERICAL VARIABLE */

PROC STDIZE DATA =  MYLIB097.TESTING_DS_TP063097_LA_N REPONLY 
METHOD=MEAN OUT= MYLIB097.TESTING_DS_TP063097_LA_N;
VAR LOAN_AMOUNT;

QUIT;

/*STEP 5: AFTER IMPUTING MISSING VALUES FOUND IN THE NUMERICAL VARIABLE LOAN_AMOUNT */

PROC SQL;
SELECT *
FROM  MYLIB097.TESTING_DS_TP063097_LA_N t 
WHERE ( t.LOAN_AMOUNT EQ .);
QUIT;

TITLE 'AFTER IMPUTATION';
PROC SQL;
SELECT COUNT (*) LABEL = 'NO. OF OBS'
FROM MYLIB097.TESTING_DS_TP063097_LA_N t
WHERE ( t.LOAN_AMOUNT EQ .);
QUIT;

/*DO FOR LOAN_DURATION AND CANDIDATE INCOME */

/* IMPUTE MISSING VALUES FOR LOAN_DURATION */
/*STEP 1: CREATE A COPY OF THE MYLIB097.TESTING_DS_TP063097_BK AS MYLIB097.TESTING_DS_TP063097_BK1 */

PROC SQL;

CREATE TABLE MYLIB097.TESTING_DS_TP063097_LD AS /*Loan DURATION named as LD*/
SELECT * FROM MYLIB097.TESTING_DS_TP063097_BK;

QUIT; 

PROC SQL;

SELECT *
FROM MYLIB097.TESTING_DS_TP063097_LD t
WHERE ( t.LOAN_DURATION EQ .);
QUIT;

/*STEP 2: */
TITLE 'Loan duration No. Of OBS';
PROC SQL;
SELECT COUNT (*) LABEL = 'NO. OF OBS'
FROM MYLIB097.TESTING_DS_TP063097_LD t
WHERE ( t.LOAN_DURATION EQ .);
QUIT;

/*STEP 3: */

PROC SQL;
CREATE TABLE MYLIB097.TESTING_DS_TP063097_LD_N AS
SELECT * FROM  MYLIB097.TESTING_DS_TP063097_LD;

QUIT;

/*STEP 4: IMPUTING MISSING VALUES AS THIS IS A NUMERICAL VARIABLE */

PROC STDIZE DATA =  MYLIB097.TESTING_DS_TP063097_LD_N REPONLY 
METHOD=MEAN OUT= MYLIB097.TESTING_DS_TP063097_LD_N;
VAR LOAN_DURATION;

QUIT;

/*STEP 5: AFTER IMPUTING MISSING VALUES FOUND IN THE NUMERICAL VARIABLE LOAN_AMOUNT */

PROC SQL;
SELECT *
FROM  MYLIB097.TESTING_DS_TP063097_LD_N t 
WHERE ( t.LOAN_DURATION EQ .);
QUIT;

TITLE 'AFTER IMPUTATION';
PROC SQL;
SELECT COUNT (*) LABEL = 'NO. OF OBS'
FROM MYLIB097.TESTING_DS_TP063097_LD_N t
WHERE ( t.LOAN_DURATION EQ .);
QUIT;



/**************************************************** END OF IMPUTATION OF MISSING VALUES IN THE TRAINING DATASET ************************************************/

/*BUILD A LOGISTIC REGRESSION MODEL */

PROC LOGISTIC DATA=MYLIB097.TRAINING_DS_TP063097_FM OUTMODEL=MYLIB097.TRAINING_DS_TP063097_FM_MODEL;
CLASS 

LOAN_LOCATION
MARITAL_STATUS
QUALIFICATION
LOAN_LOCATION
;

/*ABOVE ARE CATEGORICAL VARIABLES */
MODEL LOAN_APPROVAL_STATUS = 

/* LOAN_APPLICATION_STATUS IS A DEPENDENT VARIABLE */

LOAN_AMOUNT
LOAN_DURATION
LOAN_HISTORY
MARITAL_STATUS
QUALIFICATION
GUARANTEE_INCOME
LOAN_LOCATION
;

OUTPUT OUT = MYLIB097.TRAINING_DS_TP063097_FM P = PRED_PROB;
/*PRED_PROB -> PREDICTED PROBABILITY - VARIABLE TO HOLD PREDICTED PROBABILITY
OUT -> THE OUTPUT WILL BE STORED IN THE DATASET
AKA INFORMATION CRITERIA MUST ( AIX ) < SC (SCHWARZ CRITERION)
*/
RUN;

/* To display the the predicted probability found in the MYLIB097.TRAINING_DS_TP063097_FM dataset */

PROC SQL;

SELECT *FROM MYLIB097.TRAINING_DS_TP063097_FM;

QUIT;

PROC LOGISTIC INMODEL=MYLIB097.TRAINING_DS_TP063097_FM_MODEL; /*THE MODEL CREATED */
SCORE DATA=MYLIB097.TESTING_DS_TP063097_LH /*THE TESTING DATASSET */
OUT=MYLIB097.TESTING_DS_PREDICTION; /*LOCATION OF OUTPUT */
QUIT;

PROC SQL;

SELECT *FROM MYLIB097.TESTING_DS_PREDICTION; /*DISPLAY THE TESTING PREDICTION DATASET TO SEE THE LOAN APPROVAL STATUS */
QUIT;

ODS HTML CLOSE;
ODS PDF CLOSE;


PROC REPORT DATA=MYLIB097.TESTING_DS_PREDICTION NOWINDOWS;
BY SME_LOAN_ID_NO;
DEFINE SME_LOAN_ID_NO / GROUP 'LOAN ID';
DEFINE I_LOAN_APPROVAL_STATUS / GROUP 'APPROVAL STATUS';
FOOTNOTE '-----END OF REPORT----';
RUN;